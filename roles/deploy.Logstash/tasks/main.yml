- block:
    - name: Checking logstash
      shell: /usr/share/logstash/bin/logstash -V | awk '{ print $2 }'
      changed_when: false
      register: verChk
      failed_when: verChk.stdout is version(elk_version, operator='lt', strict=True)
  rescue:
    - name: Checking if target is suitable for deploy
      assert:
        that:
          - "ansible_memory_mb.nocache.free >= 1024"
          - "ansible_processor_vcpus >= 2"
          - "ansible_architecture == 'x86_64'"
    - include_tasks: '{{ ansible_os_family }}.yml'
    # - include_tasks: "plugins.yml target={{ target }}"
    #   with_items: "{{ logstash_plugins }}"
    #   loop_control:
    #     loop_var: target
    - name: Updating logstash systemd service configure
      ini_file:
        path: /etc/systemd/system/logstash.service.d/override.conf
        section: Service
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        backup: yes
      with_items:
        - option: PermissionsStartOnly
          value: true
        - option: ExecStartPre
          value: "/bin/chown -R logstash:logstash {{ logstash_data_path }} {{ logstash_log_path }}"
      notify: Restart logstash
    - name: Installing logrotate configure
      template:
        src: logrotate_logstash.j2
        dest: /etc/logrotate.d/logstash

- name: Updating logstash configuration
  template:
    src: '{{ item }}.j2'
    dest: '/etc/logstash/{{ item }}'
  with_items:
    - jvm.options
    - logstash.yml
  notify: Restart logstash

- name: Updating piplines
  template:
    src: '{{ item }}.j2'
    dest: '/etc/logstash/conf.d/{{ item }}'
  with_items:
    - 000-input.conf
    - 001-logstash.conf
    - 002-monit.conf
    - 003-syslog.conf
    - 004-auditd.conf
    - 999-output.conf
  notify: Checking logstash configuration
  register: templates

- name: Listing current pipline files
  command: "ls /etc/logstash/conf.d/"
  ignore_errors: True
  changed_when: false
  register: allTemplates

- name: Removing unmanaged pipline files
  file:
    path: "/etc/logstash/conf.d/{{ item }}"
    state: absent
  with_items: "{{ allTemplates.stdout_lines }}"
  when: "item not in (templates.results|selectattr('item', 'string')|map(attribute='item')|list)"
