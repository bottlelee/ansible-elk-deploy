- block:
    - name: Checking elasticsearch
      stat:
        path: /usr/share/elasticsearch/bin/elasticsearch
      register: bin
      failed_when: not bin.stat.exists
  rescue:
    - include_tasks: env_check.yml
    - include_tasks: '{{ ansible_os_family }}.yml'
    - include_tasks: common_setup.yml

- name: Create ElasticSearch data dirs
  file:
    path: "{{ item }}"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: 0750
  with_items: "{{ elastic_data_paths }}"

- name: Updating ElasticSearch configuration
  template:
    src: 'elasticsearch/{{ item }}.j2'
    dest: '/etc/elasticsearch/{{ item }}'
  with_items:
    - jvm.options
    - elasticsearch.yml
  notify: Restarting elasticsearch

- block:
    - include_tasks: searchguard/main.yml
  rescue:
    - name: Updating ElasticSearch configuration
      template:
        src: 'elasticsearch/{{ item }}.j2'
        dest: '/etc/elasticsearch/{{ item }}'
      with_items:
        - jvm.options
        - elasticsearch.yml
    - name: Restarting elasticsearch service
      service:
        name: elasticsearch
        state: restarted
    - include_tasks: searchguard/main.yml
  when: searchguard_enabled

- block:
    - wait_for:
        host: "{{ bind_address }}"
        port: "{{ item }}"
        timeout: 60
      with_items:
        - 9300
        - '{{ elastic_http_port }}'
  rescue:
    - name: Restarting ElasticSearch service
      service:
        name: elasticsearch
        state: restarted
        enabled: yes
        daemon_reload: yes
    - wait_for:
        host: "{{ bind_address }}"
        port: "{{ item }}"
      with_items:
        - 9300
        - '{{ elastic_http_port }}'

- include_tasks: set_template.yml
  when: (groups['elasticsearch']|last) == inventory_hostname

# - block:
#     - name: Checking ElasticSearch version
#       uri:
#         url: "{{ bind_address }}:{{ elastic_http_port }}"
#         return_content: yes
#         validate_certs: no
#       register: versionCheck
#       changed_when: false
#       failed_when: versionCheck.json.version.number is version(elk_version, operator='lt', strict=True)
#   rescue:
#     - include_tasks: pre_upgrade.yml
#     - include_tasks: '{{ ansible_os_family }}.yml'
#     - include_tasks: post_upgrade.yml

- include_tasks: report.yml
